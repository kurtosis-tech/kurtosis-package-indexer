version: 2.1

parameters:
  go-version:
    type: string
    default: "1.19"
  docker-engine-version:
    type: string
    default: "20.10.7"

# NOTE: Because CircleCI jobs run on separate machines from each other, we duplicate steps (like checkout) between jobs. This is because doing the "correct" DRY
#  refactoring of, "one job for checkout, one job for build Docker image, etc." would require a) persisting files between jobs and b) persisting Docker images between
#  jobs. Both are annoying (saving/loading workspaces require re-downloading the workspace over the network, and there doesn't seem to be a good way to do Docker
#  images), so we run everything inside a single job.
# See also: https://discuss.circleci.com/t/can-docker-images-be-preserved-between-jobs-in-a-workflow-without-a-manual-load-save/23388/12
jobs:
  build_api_golang:
    docker:
      - image: "cimg/go:<< pipeline.parameters.go-version>>"
    steps:
      - checkout

      # If the only changes are to the docs, don't run the slow (and expensive) code checks
      # `git diff --exit-code` returns 0 exit code if no changes, and 1 if changes
      - run: |
          if git --no-pager diff --exit-code origin/develop...HEAD -- . ':!docs'; then
            circleci-agent step halt
          fi

      - run: |
          api/golang/scripts/build.sh

  build_server:
    docker:
      - image: "cimg/go:<< pipeline.parameters.go-version>>"
    steps:
      - checkout

      # If the only changes are to the docs, don't run the slow (and expensive) code checks
      # `git diff --exit-code` returns 0 exit code if no changes, and 1 if changes
      - run: |
          if git --no-pager diff --exit-code origin/develop...HEAD -- . ':!docs'; then
            circleci-agent step halt
          fi

      - run: |
          server/scripts/build.sh

  publish_server_image:
    docker:
      - image: "cimg/go:<< pipeline.parameters.go-version >>"
    steps:
      - checkout

      - setup_remote_docker:
          version: "<< pipeline.parameters.docker-engine-version>>"
      - run: echo "${DOCKER_PASSWORD}" | docker login -u ${DOCKER_USERNAME} --password-stdin

      - run: |
          skip_docker_image_building=true
          server/scripts/build.sh
      - run: |
          set -euo pipefail
          source server/scripts/_constants.env
          dockerfile_filepath='server/Dockerfile'
          version_build="$(./server/scripts/get-docker-tag.sh)"
          version_to_publish="${CIRCLE_TAG}" # this job is run only on tags
          echo "Version that was built: ${version_build}"
          echo "Version that will be published: ${version_to_publish}"
          image_name_with_version="${IMAGE_ORG_AND_REPO}:${version_build}"
          image_name_to_publish_semver="${IMAGE_ORG_AND_REPO}:${version_to_publish}"
          image_name_to_publish_latest="${IMAGE_ORG_AND_REPO}:latest"
          push_to_dockerhub=true 
          server/scripts/docker-image-builder.sh "${push_to_dockerhub}" "${dockerfile_filepath}" "${image_name_with_version}" "${image_name_to_publish_semver}" "${image_name_to_publish_latest}"

workflows:
  build:
    jobs:
      - build_api_golang:
          context:
            - github-user
          filters:
            branches:
              ignore:
                - develop
                - main
      - build_server:
          context:
            - github-user
          filters:
            branches:
              ignore:
                - develop
                - main
      - publish_server_image:
          context:
            - docker-user
            - github-user
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^[0-9]+\.[0-9]+\.[0-9]+$/
