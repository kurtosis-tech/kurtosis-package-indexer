// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: kurtosis_package_indexer.proto

package generatedconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	generated "github.com/kurtosis-tech/kurtosis-package-indexer/api/golang/generated"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// KurtosisPackageIndexerName is the fully-qualified name of the KurtosisPackageIndexer service.
	KurtosisPackageIndexerName = "kurtosis_package_indexer.KurtosisPackageIndexer"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// KurtosisPackageIndexerIsAvailableProcedure is the fully-qualified name of the
	// KurtosisPackageIndexer's IsAvailable RPC.
	KurtosisPackageIndexerIsAvailableProcedure = "/kurtosis_package_indexer.KurtosisPackageIndexer/IsAvailable"
	// KurtosisPackageIndexerGetPackagesProcedure is the fully-qualified name of the
	// KurtosisPackageIndexer's GetPackages RPC.
	KurtosisPackageIndexerGetPackagesProcedure = "/kurtosis_package_indexer.KurtosisPackageIndexer/GetPackages"
	// KurtosisPackageIndexerReindexProcedure is the fully-qualified name of the
	// KurtosisPackageIndexer's Reindex RPC.
	KurtosisPackageIndexerReindexProcedure = "/kurtosis_package_indexer.KurtosisPackageIndexer/Reindex"
)

// KurtosisPackageIndexerClient is a client for the kurtosis_package_indexer.KurtosisPackageIndexer
// service.
type KurtosisPackageIndexerClient interface {
	IsAvailable(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
	GetPackages(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[generated.GetPackagesResponse], error)
	Reindex(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
}

// NewKurtosisPackageIndexerClient constructs a client for the
// kurtosis_package_indexer.KurtosisPackageIndexer service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewKurtosisPackageIndexerClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) KurtosisPackageIndexerClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &kurtosisPackageIndexerClient{
		isAvailable: connect.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+KurtosisPackageIndexerIsAvailableProcedure,
			opts...,
		),
		getPackages: connect.NewClient[emptypb.Empty, generated.GetPackagesResponse](
			httpClient,
			baseURL+KurtosisPackageIndexerGetPackagesProcedure,
			opts...,
		),
		reindex: connect.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+KurtosisPackageIndexerReindexProcedure,
			opts...,
		),
	}
}

// kurtosisPackageIndexerClient implements KurtosisPackageIndexerClient.
type kurtosisPackageIndexerClient struct {
	isAvailable *connect.Client[emptypb.Empty, emptypb.Empty]
	getPackages *connect.Client[emptypb.Empty, generated.GetPackagesResponse]
	reindex     *connect.Client[emptypb.Empty, emptypb.Empty]
}

// IsAvailable calls kurtosis_package_indexer.KurtosisPackageIndexer.IsAvailable.
func (c *kurtosisPackageIndexerClient) IsAvailable(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return c.isAvailable.CallUnary(ctx, req)
}

// GetPackages calls kurtosis_package_indexer.KurtosisPackageIndexer.GetPackages.
func (c *kurtosisPackageIndexerClient) GetPackages(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[generated.GetPackagesResponse], error) {
	return c.getPackages.CallUnary(ctx, req)
}

// Reindex calls kurtosis_package_indexer.KurtosisPackageIndexer.Reindex.
func (c *kurtosisPackageIndexerClient) Reindex(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return c.reindex.CallUnary(ctx, req)
}

// KurtosisPackageIndexerHandler is an implementation of the
// kurtosis_package_indexer.KurtosisPackageIndexer service.
type KurtosisPackageIndexerHandler interface {
	IsAvailable(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
	GetPackages(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[generated.GetPackagesResponse], error)
	Reindex(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
}

// NewKurtosisPackageIndexerHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewKurtosisPackageIndexerHandler(svc KurtosisPackageIndexerHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	kurtosisPackageIndexerIsAvailableHandler := connect.NewUnaryHandler(
		KurtosisPackageIndexerIsAvailableProcedure,
		svc.IsAvailable,
		opts...,
	)
	kurtosisPackageIndexerGetPackagesHandler := connect.NewUnaryHandler(
		KurtosisPackageIndexerGetPackagesProcedure,
		svc.GetPackages,
		opts...,
	)
	kurtosisPackageIndexerReindexHandler := connect.NewUnaryHandler(
		KurtosisPackageIndexerReindexProcedure,
		svc.Reindex,
		opts...,
	)
	return "/kurtosis_package_indexer.KurtosisPackageIndexer/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case KurtosisPackageIndexerIsAvailableProcedure:
			kurtosisPackageIndexerIsAvailableHandler.ServeHTTP(w, r)
		case KurtosisPackageIndexerGetPackagesProcedure:
			kurtosisPackageIndexerGetPackagesHandler.ServeHTTP(w, r)
		case KurtosisPackageIndexerReindexProcedure:
			kurtosisPackageIndexerReindexHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedKurtosisPackageIndexerHandler returns CodeUnimplemented from all methods.
type UnimplementedKurtosisPackageIndexerHandler struct{}

func (UnimplementedKurtosisPackageIndexerHandler) IsAvailable(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kurtosis_package_indexer.KurtosisPackageIndexer.IsAvailable is not implemented"))
}

func (UnimplementedKurtosisPackageIndexerHandler) GetPackages(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[generated.GetPackagesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kurtosis_package_indexer.KurtosisPackageIndexer.GetPackages is not implemented"))
}

func (UnimplementedKurtosisPackageIndexerHandler) Reindex(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("kurtosis_package_indexer.KurtosisPackageIndexer.Reindex is not implemented"))
}
